import telebot
from telebot import types
from telebot.types import LabeledPrice
import creds
import database



token = creds.token
bot = telebot.TeleBot(token)
pay_token = creds.pay_token

markdown = """
    *bold text*
    _italic text_
    [text](URL)
    """

def main():
    def add_user(user_id):
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton('—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', url=creds.chat_link)
        markup.add(btn)
        bot.send_message(user_id,'–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ: ', reply_markup=markup)

    def unbun_user(user_id):
        bot.unban_chat_member(creds.chat_id, user_id)

    @bot.message_handler(commands=['start'])
    def start_func(message):
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –ê–ë–û–ù–ï–ú–ï–ù–¢')
        btn2 = types.KeyboardButton('–ê–ë–û–ù–ï–ú–ï–ù–¢ –ü–û –ü–ê–ö–ï–¢–ê–ú')
        markup.add(btn1,btn2)
        photo = open('images/cotton.jpg', 'rb')
        bot.send_photo(user_id, photo)
        bot.send_message(user_id,
                         '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ *¬´–ü–°–ò–•–û–õ–û–ì–ò–Ø –Ω–∞ ùüè-ùüê —Å –ì–∞–ª–∏–Ω–æ–π –†—É–±—Ü–æ–≤–æ–π¬ª*! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø'
                         ' –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É - –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.',
                         reply_markup=markup, parse_mode="Markdown")



    @bot.message_handler(content_types=['text'])
    def stage2(message):
        user_id = message.from_user.id
        if(message.text == '–ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –ê–ë–û–ù–ï–ú–ï–ù–¢'):
            bot.send_invoice(
                user_id,
                "–ê–ë–û–ù–ï–ú–ï–ù–¢ –ù–ê –ú–ï–°–Ø–¶",
                "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ 1-2 —Å –ì–∞–ª–∏–Ω–æ–π –†—É–±—Ü–æ–≤–æ–π¬ª",
                "payload",
                pay_token,
                "RUB",
                prices=[LabeledPrice(label='–†—É–±',
                                     amount=39000)]
            )
        elif(message.text == '–ê–ë–û–ù–ï–ú–ï–ù–¢ –ü–û –ü–ê–ö–ï–¢–ê–ú'):
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–Ω–∞ 3 –º–µ—Å—è—Ü–∞', callback_data='3')
            btn2 = types.InlineKeyboardButton('–Ω–∞ 5 –º–µ—Å—è—Ü–µ–≤', callback_data='5')
            btn3 = types.InlineKeyboardButton('–Ω–∞ 7 –º–µ—Å—è—Ü–µ–≤', callback_data='7')
            btn4 = types.InlineKeyboardButton('–Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', callback_data='12')
            markup.add(btn1,btn2,btn3,btn4)
            bot.send_message(user_id,'*–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:* ', reply_markup=markup, parse_mode="Markdown")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('3'))
    def threemonth(call):
        user_id = call.from_user.id
        bot.send_invoice(
            user_id,
            "–ê–ë–û–ù–ï–ú–ï–ù–¢ –ù–ê –¢–†–ò –ú–ï–°–Ø–¶–ê",
            "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ 1-2 —Å –ì–∞–ª–∏–Ω–æ–π –†—É–±—Ü–æ–≤–æ–π¬ª",
            "payload",
            pay_token,
            "RUB",
            prices=[LabeledPrice(label='–†—É–±',
                                 amount=100000)]
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('5'))
    def fivemonth(call):
        user_id = call.from_user.id
        bot.send_invoice(
            user_id,
            "–ê–ë–û–ù–ï–ú–ï–ù–¢ –ù–ê –ü–Ø–¢–¨ –ú–ï–°–Ø–¶–ï–í",
            "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –ø—è—Ç—å –º–µ—Å—è—Ü–µ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ 1-2 —Å –ì–∞–ª–∏–Ω–æ–π –†—É–±—Ü–æ–≤–æ–π¬ª",
            "payload",
            pay_token,
            "RUB",
            prices=[LabeledPrice(label='–†—É–±',
                                 amount=170000)]
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('7'))
    def sevenmonth(call):
        user_id = call.from_user.id
        bot.send_invoice(
            user_id,
            "–ê–ë–û–ù–ï–ú–ï–ù–¢ –ù–ê –°–ï–ú–¨ –ú–ï–°–Ø–¶–ï–í",
            "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ —Å–µ–º—å –º–µ—Å—è—Ü–µ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ 1-2 —Å –ì–∞–ª–∏–Ω–æ–π –†—É–±—Ü–æ–≤–æ–π¬ª",
            "payload",
            pay_token,
            "RUB",
            prices=[LabeledPrice(label='–†—É–±',
                                 amount=240000)]
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('12'))
    def sevenmonth(call):
        user_id = call.from_user.id
        bot.send_invoice(
            user_id,
            "–ê–ë–û–ù–ï–ú–ï–ù–¢ –ù–ê –ì–û–î",
            "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å –º–µ—Å—è—Ü–µ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ 1-2 —Å –ì–∞–ª–∏–Ω–æ–π –†—É–±—Ü–æ–≤–æ–π¬ª",
            "payload",
            pay_token,
            "RUB",
            prices=[LabeledPrice(label='–†—É–±',
                                 amount=400000)]
        )

    @bot.pre_checkout_query_handler(func=lambda query: True)
    def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        @bot.message_handler(content_types=['successful_payment'])
        def successfful_payment(message):
            user_id = message.from_user.id
            payment = pre_checkout_query.total_amount
            username = message.from_user.username
            firstname = message.from_user.first_name
            lastname = message.from_user.last_name
            database.open_order(user_id, payment, username, firstname, lastname)
            bot.send_message(user_id, '*–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ* ', parse_mode="Markdown")
            try:
                unbun_user(user_id)
                add_user(user_id)
            except telebot.apihelper.ApiTelegramException:
                add_user(user_id)
